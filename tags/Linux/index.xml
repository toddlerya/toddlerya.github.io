<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 日拱一卒</title>
    <link>https://toddlerya.github.io/tags/linux/</link>
    <description>Recent content in Linux on 日拱一卒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 Dec 2017 13:57:10 +0000</lastBuildDate>
    
	<atom:link href="https://toddlerya.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>探究inode耗尽导致的no space left on device报错原因</title>
      <link>https://toddlerya.github.io/post/inode%E8%80%97%E5%B0%BD%E5%AF%BC%E8%87%B4%E7%9A%84no-space-left-on-device%E6%8A%A5%E9%94%99/</link>
      <pubDate>Sun, 24 Dec 2017 13:57:10 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/inode%E8%80%97%E5%B0%BD%E5%AF%BC%E8%87%B4%E7%9A%84no-space-left-on-device%E6%8A%A5%E9%94%99/</guid>
      <description>在{% post_link Golang学习（一） 《Golang学习（一）》 %}那篇博客中，我们提到了由于inode被耗尽导致的磁盘存储空间不足的报错，现在我们就来深入了解下inode。
什么是inode？ 理解inode，要从文件储存说起。 文件储存在硬盘上，硬盘的最小存储单位叫做&amp;rdquo;扇区&amp;rdquo;（Sector）。每个扇区储存512字节（相当于0.5KB）。 操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个&amp;rdquo;块&amp;rdquo;（block）。这种由多个扇区组成的&amp;rdquo;块&amp;rdquo;，是文件存取的最小单位。&amp;rdquo;块&amp;rdquo;的大小，最常见的是4KB，即连续八个 sector组成一个 block。 文件数据都储存在&amp;rdquo;块&amp;rdquo;中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为&amp;rdquo;索引节点&amp;rdquo;。
inode记录了什么信息？ inode包含文件的元信息，具体来说有以下内容： + 文件的字节数 + 文件拥有者的User ID + 文件的Group ID + 文件的读、写、执行权限 + 文件的时间戳，共有三个：ctime指inode上一次变动的时间，mtime指文件内容上一次变动的时间，atime指文件上一次打开的时间。 + 链接数，即有多少文件名指向这个inode + 文件数据block的位置
可以用stat命令，查看某个文件的inode信息：stat example.txt
总之，除了文件名以外的所有文件信息，都存在inode之中。
inode的大小 inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。 每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。
查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。 df -i 查看每个inode节点的大小，可以用如下命令： sudo dumpe2fs -h /dev/vdb | grep &amp;ldquo;inode size&amp;rdquo;
由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。
inode号码 每个inode都有一个号码，操作系统用inode号码来识别不同的文件。
这里值得重复一遍，Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。 对于系统来说，文件名只是inode号码便于识别的别称或者绰号。 表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：首先，系统找到这个文件名对应的inode号码；其次，通过inode号码，获取inode信息；最后，根据inode信息，找到文件数据所在的block，读出数据。 使用ls -i命令，可以看到文件名对应的inode号码：ls -i example.txt
目录文件 Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开目录文件。
目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。
ls命令只列出目录文件中的所有文件名：ls /etc
ls -i命令列出整个目录文件，即文件名和inode号码：ls -i /etc</description>
    </item>
    
  </channel>
</rss>