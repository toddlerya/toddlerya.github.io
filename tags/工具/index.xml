<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工具 on 日拱一卒</title>
    <link>https://toddlerya.github.io/tags/%E5%B7%A5%E5%85%B7/</link>
    <description>Recent content in 工具 on 日拱一卒</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Dec 2017 16:13:51 +0000</lastBuildDate>
    
	<atom:link href="https://toddlerya.github.io/tags/%E5%B7%A5%E5%85%B7/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang学习（二）</title>
      <link>https://toddlerya.github.io/post/golang%E5%AD%A6%E4%B9%A0%E4%BA%8C/</link>
      <pubDate>Sun, 31 Dec 2017 16:13:51 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/golang%E5%AD%A6%E4%B9%A0%E4%BA%8C/</guid>
      <description>闲扯 2017年的最后一天啦！今天是最后一批90后（1999年12月31日出生）的18岁生日，祝他们生日快乐！明天就是2018年啦，意味着90后已经全部成年，逐步成为社会的中流砥柱啦！ 顺便吐槽下，被朋友圈的18岁照片刷屏啦，岁月是把杀猪刀，18岁的少年们都去哪啦！小伙伴们不要只顾着工作，也注意下身体啊，要变强不要变秃啊！不要变成油腻的中年胖子啊！
祝自己在2018年能更加努力，锻炼好身体！还有很多很多事情等我去做！Fight！
言归正传，在{% post_link Golang学习（一） 《Golang学习（一）》 %}那篇博客中我们写了一个小工具，当时还没学习到并发，正好元旦假期学习了下并发，来实践改进下我们的工具。
正文 遗留Bug修复 文件复制过程中异常报错，程序没有退出的问题已经修复，创建文件和打开文件时加入了panic {% codeblock lang:golang %} srcFile, err := os.Open(src) if err != nil { fmt.Println(err) panic(&amp;ldquo;打开文件错误!&amp;rdquo;) } defer srcFile.Close()
desFile, err := os.Create(des) if err != nil { fmt.Println(err) panic(&amp;ldquo;创建文件错误!&amp;rdquo;) } defer desFile.Close() {% endcodeblock %}
使用Golang的gorutine来并发，提高性能 创建一个容量与期望生成文件个数大小相当的布尔型的chan，然后循环执行任务，每次向chan写入一个值，并通过读取chan来阻塞main函数的结束，伪代码如下 {% codeblock lang:golang %} func main() { c := make(chan bool, *generateFileNumber) for count := 0; count &amp;lt; *generateFileNumber; count++ { dosomething&amp;copy; } &amp;lt;-c }</description>
    </item>
    
    <item>
      <title>开源工具集--备忘清单</title>
      <link>https://toddlerya.github.io/post/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E9%9B%86-%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</link>
      <pubDate>Sat, 30 Dec 2017 21:37:25 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/%E5%BC%80%E6%BA%90%E5%B7%A5%E5%85%B7%E9%9B%86-%E5%A4%87%E5%BF%98%E6%B8%85%E5%8D%95/</guid>
      <description>经常看到一些有趣的开源工具，没机会去尝试，时间久了就忘记还有这些轮子啦，开个坑做个备忘录，记录下。
监控系统  open-falcon Prometheus Cockpit  数据分析/BI  Metabase  数据库  时间序列数据库influxdb  2017年10月22日 于 南京
Email
GitHub</description>
    </item>
    
    <item>
      <title>Golang学习（一）</title>
      <link>https://toddlerya.github.io/post/golang%E5%AD%A6%E4%B9%A0%E4%B8%80/</link>
      <pubDate>Sun, 24 Dec 2017 12:11:49 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/golang%E5%AD%A6%E4%B9%A0%E4%B8%80/</guid>
      <description>闲扯 去北京参加Top100学习到现在一个多月过去了，时间过得好快，转眼2017年只剩下最后一周了，不由得感叹时间就像指缝的流沙。 再加上最近中年程序员不堪重负的各种新闻，感觉自己距离那一天也没多远了，在此之前努力提高自己的姿势水平吧，要没时间了。
在Top100听到了很多讲师提到了Golang，结合之前看过的左耳朵耗子的文章《GO语言、DOCKER 和新技术》，决定要学习了解下Golang了。 最近半个月断断续续看了Golang的一些教程《GO 语言简介（上）— 语法》、《GO 语言简介（下）— 特性》、无闻老师的《Go 编程基础》，只是对Golang有了一点点初步的了解。 学习一门语言最重要的还是要撸代码啊，要动手写个小工具试试手。 恰巧昨天加班时帮同事写了个小工具，感觉用Python的性能不够好，而且想要高性能还要依赖gevent这种第三方库，不方便部署，于是想到用Golang可以来试下，写完编译下给同事用就好啦！昨晚回到家吃过饭陪女朋友玩了会，从十点开始撸代码到凌晨一点，终于写出一个小demo，特此记录下年轻人的第一个Golang小程序。
正文 工具需求是有一个样例zip包，zip包里面有一些bcp数据、xml数据、bjson数据、图片、视频什么的。 zip包的命名规范如下： AAA-BBB-1514090969-CCC_DDD_21234.zip 我们要将zip包的1514090969【绝对秒数】与21234【随机序列】进行替换，随机生成大量的zip包副本，发送到某个ETL输入目录，暂且不管zip包里面的内容（其实zip包内的文件也要随机生成）。 之前同事用Shell写的，没看他代码怎么实现的，不过肯定有问题，一小时才生成了三万个样例zip包，远远达不到压测的要求。 于是我花了十几分钟调用Python的gevent模块帮他重新用Python写了一遍，性能瞬间爆炸。 但是部署gevent比较麻烦（公司和客户都是内网环境，pip是没法用的，只能手动安装所需的第三方包，而且公司大部分操作系统还是Redhat AS6U3，默认的Python是2.6版本，各种不方便），就想到了如果用Golang写一遍是否性能很好，编译后提供二进制文件直接运行就可以了，于是就有了下面的代码。
代码 /* * User: toddlerya * Date: 2017/12/23 * ds接入模块加压工具 */ package main import ( &amp;quot;flag&amp;quot; &amp;quot;fmt&amp;quot; &amp;quot;io&amp;quot; &amp;quot;math/rand&amp;quot; &amp;quot;os&amp;quot; &amp;quot;strconv&amp;quot; &amp;quot;strings&amp;quot; &amp;quot;time&amp;quot; ) func judgeExists(name string) bool { if _, err := os.Stat(name); err != nil { if os.IsNotExist(err) { return false } } return true } func copyFile(src, des string) (w int64, err error) { srcFile, err := os.</description>
    </item>
    
    <item>
      <title>Pythoner的vim</title>
      <link>https://toddlerya.github.io/post/pythoner%E7%9A%84vim/</link>
      <pubDate>Fri, 08 Sep 2017 23:08:23 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/pythoner%E7%9A%84vim/</guid>
      <description>去年申请的免费aws上个月底到期了（ss梯子没有了T_T），这个月搞了个半年免费的阿里云VPS。 国内的VPS网速果然好快，决定好好利用起来~
正好最近在学Scrapy，感觉用vim写代码，不能自动补全好难受，在公司的内网环境用vim不好折腾插件也就罢了，自己的服务器还是要搞的顺手点，磨刀不误砍柴工嘛。
为了一劳永逸，决定开个坑，维护自己的vim配置，以后换个环境就能开箱使用啦！
先上个项目地址：https://github.com/toddlerya/awesome-vim/
自动补全主要用了jedi-vim插件，这插件太给力了，自动补全方法，还能提示参数，查看文档。
还有一部分配置参考了k-vim-server，这位同学的vim配置很给力，他还有一个完全版的vim插件配置k-vim，大家可以去看看~
使用效果如下： 部署步骤： 1. 备份你的vimrc配置(如果有的话) cp ~/.vimrc ~/.vimrc_bak  2. 安装Vundle git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim  3. 安装jedi-vim pip install jedi-vim  4. 下载并设置vimrc git clone https://github.com/toddlerya/awesome-vim.git &amp;amp;&amp;amp; ln -s awesome-vim/vimrc ~/.vimrc  5. 安装Vundle插件 打开vim，运行命令
:PluginInstall  等显示Done后，退出vim就好啦，时间长短看网速，耐心等待。 此过程会安装这几个插件：
davidhalter/jedi-vim tmhedberg/SimpylFold vim-scripts/indentpython.vim jnurmine/Zenburn Lokaltog/powerline  6. 到此就完成啦，享受生活吧！ 2017年09月8日 于 南京
Email
GitHub</description>
    </item>
    
    <item>
      <title>关于NebulaSolarDash</title>
      <link>https://toddlerya.github.io/post/%E5%85%B3%E4%BA%8Enebulasolardash/</link>
      <pubDate>Wed, 10 May 2017 22:06:10 +0000</pubDate>
      
      <guid>https://toddlerya.github.io/post/%E5%85%B3%E4%BA%8Enebulasolardash/</guid>
      <description>2017年的5月1日，三天假期，闭门造了个轮子 写这个工具的目的是为了解决工作问题。 个人工作生产环境无法连接互联网，也没有自建的yum源等，手头又有很多服务器需要进行监控，使用现有的开源方案安装部署是个问题， 各种依赖组件包需要挨个安装，很麻烦，所以想找一款依赖较少部署简单的分布式服务器资源监控工具，找来找去没找到，索性自己动手写一个。 我的本职工作是测试，所以就用最熟悉的Python来写吧，第一次写web应用，先做出来再边学边优化吧。
工具分为客户端和服务端两部分： 服务端使用了bottle来作为web框架，echarts来渲染生成图表； 客户端使用Python原生类库采集服务器资源，客户端采集数据部分代码参考了pyDash
效果如下 项目链接链接 NebulaSolarDash
2017年05月10日 于 南京
Email
GitHub</description>
    </item>
    
  </channel>
</rss>